Name: Omkar.U.Hulawale.
Batch: A2.
Roll No: 12150
Exp:5

//Construct an expression tree from the given prefix expression eg. +- - a*bc/def and traverse it using post order traversal (non recursive) and then delete the entire tree.
//I/P:-
#include <iostream>
#include <stack>
#include <vector>
using namespace std;
// Node structure for tree
struct Node {
    char value;
    Node* left;
    Node* right;
    Node(char val) : value(val), left(nullptr), right(nullptr) {}
};
// Check if character is operator
bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}
// Construct expression tree from prefix expression
Node* constructTree(string prefix) {
    stack<Node*> stk;
    for (int i = prefix.length() - 1; i >= 0; i--) {
        if (isOperator(prefix[i])) {
            Node* op1 = stk.top(); stk.pop();
            Node* op2 = stk.top(); stk.pop();
            Node* node = new Node(prefix[i]);
            node->left = op1;
            node->right = op2;
            stk.push(node);
        } else {
            stk.push(new Node(prefix[i]));
        }
    }
    return stk.top();
}
// Delete tree to prevent memory leak
void deleteTree(Node* node) {
    if (node == nullptr) return;
    deleteTree(node->left);
    deleteTree(node->right);
    delete node;
}
// Non-recursive post-order traversal
void postOrderTraversal(Node* root) {
    if (!root) return;
    stack<Node*> s1, s2;
    s1.push(root);
    Node* node;
    while (!s1.empty()) {
        node = s1.top();
        s1.pop();
        s2.push(node);
        if (node->left)
            s1.push(node->left);
        if (node->right)
            s1.push(node->right);
    }
    // Printing the post-order traversal
    while (!s2.empty()) {
        node = s2.top();
        s2.pop();
        cout << node->value << ' ';
    }
}
int main() {
    string prefix = "+--a*bc/def";
    Node* root = constructTree(prefix);
    cout << "Post-order traversal: ";
    postOrderTraversal(root); // Expected output: a b c * - d e / - f + 
    cout << endl;
    deleteTree(root);
    return 0;
}

O/P:-
/tmp/QmQcH5fFm3.o
Post-order traversal: a b c * - d e / - f + 
